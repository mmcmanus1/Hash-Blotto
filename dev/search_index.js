var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = HashBlotto","category":"page"},{"location":"#HashBlotto","page":"Home","title":"HashBlotto","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for HashBlotto.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [HashBlotto]","category":"page"},{"location":"#HashBlotto.HashBlotto","page":"Home","title":"HashBlotto.HashBlotto","text":"HashBlotto\n\nA package that is build by the HashBlotto Team in C25.  The project is based on the Google HashCode 2014 competition.\n\n\n\n\n\n","category":"module"},{"location":"#HashBlotto.all_random-Tuple{Any}","page":"Home","title":"HashBlotto.all_random","text":"all_random(city)\n\nIterates through 10 random walks, returning the best found\n\n\n\n\n\n","category":"method"},{"location":"#HashBlotto.get_value-Tuple{Any, Any, Any}","page":"Home","title":"HashBlotto.get_value","text":"get_value (current_junction, visited)\n\nReturns the value of the current junction\n\n\n\n\n\n","category":"method"},{"location":"#HashBlotto.greed-Tuple{Any, Any}","page":"Home","title":"HashBlotto.greed","text":"greed(City)\n\nA greedy construction heuristic solution: Greedily maximize the distance/time ratio of the next junction. Reward is scaled down by  2 * repetitions of a street [if more than once] to discourage repeated edges\n\n\n\nWe improve on the prior work of the HashCode2014 package (https://github.com/gdalle/HashCode2014.jl) by designing and implementing a greedy heuristic (https://github.com/gdalle/HashCode2014.jl/blob/main/src/random_walk.jl)\n\n\n\n\n\n","category":"method"}]
}
