var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = HashBlotto","category":"page"},{"location":"#HashBlotto","page":"Home","title":"HashBlotto","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for HashBlotto.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [HashBlotto]","category":"page"},{"location":"#HashBlotto.HashBlotto","page":"Home","title":"HashBlotto.HashBlotto","text":"HashBlotto\n\nA package that is build by the HashBlotto Team in C25.  The project is based on the Google HashCode 2014 competition.\n\n\n\n\n\n","category":"module"},{"location":"#HashBlotto.Distributions-NTuple{4, Any}","page":"Home","title":"HashBlotto.Distributions","text":"Distributions(city, min, max, step)\n\nShows the distributions of the distances of the city at different penalty values\n\n\n\n\n\n","category":"method"},{"location":"#HashBlotto.all_random-Tuple{Any}","page":"Home","title":"HashBlotto.all_random","text":"all_random(city)\n\nIterates through 10 random walks, returning the best found solution\n\n\n\n\n\n","category":"method"},{"location":"#HashBlotto.get_best_street","page":"Home","title":"HashBlotto.get_best_street","text":"get_best_street(current_junction, street_candidates, visited)\n\nReturns the ``best'' adjacent street based on our greedy heuristic from getjunctionvalue\n\n\n\n\n\n","category":"function"},{"location":"#HashBlotto.get_junction_value-Tuple{Any, Any, Any}","page":"Home","title":"HashBlotto.get_junction_value","text":"get_junction_value (current_junction, visited, penalty)\n\nReturns the value of the current junction.  The current reward system acting under the reward equation:\n\nval * penalty ^ visited[node] \n\n\n\n\n\n","category":"method"},{"location":"#HashBlotto.graph_structure-Tuple{HashCode2014.City}","page":"Home","title":"HashBlotto.graph_structure","text":"graph_structure(city::City)\n\nGiven the city the function will return a precomupted adjacency dictionary. The keys of the dictionary will hold the the index of the vertice The values of the dictionary will be a list of tuples of (nextnodeindex, distance, duration, distance/duration)\n\n\n\n\n\n","category":"method"},{"location":"#HashBlotto.greed-Tuple{Any}","page":"Home","title":"HashBlotto.greed","text":"greed(City)\n\nGreedily construct a solution to the HashCode Challenge given a City Maximizing the distance/time ratio of the next junction. Reward is scaled down by  2 * repetitions of a street [if more than once] to discourage repeated edges\n\n\n\nWe improve on the prior work of the HashCode2014 package (https://github.com/gdalle/HashCode2014.jl) by designing and implementing a greedy heuristic (https://github.com/gdalle/HashCode2014.jl/blob/main/src/random_walk.jl)\n\n\n\n\n\n","category":"method"}]
}
